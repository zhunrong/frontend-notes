(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{429:function(t,a,s){"use strict";s.r(a);var v=s(33),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),s("h2",{attrs:{id:"执行上下文-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文-2"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),s("p",[t._v("JavaScript执行一段代码时，首先会创建一个执行上下文，每个执行上下文都有3个重要属性：")]),t._v(" "),s("ol",[s("li",[t._v("变量对象（Variable Object）")]),t._v(" "),s("li",[t._v("作用域链")]),t._v(" "),s("li",[t._v("this")])]),t._v(" "),s("p",[t._v("执行上下文可分为3种：")]),t._v(" "),s("ol",[s("li",[t._v("全局执行上下文")]),t._v(" "),s("li",[t._v("函数执行上下文")]),t._v(" "),s("li",[t._v("eval执行上下文")])]),t._v(" "),s("p",[t._v("JavaScript代码执行时，还存在一个执行上下文栈。顶层代码执行前会创建一个全局执行上下文推入执行栈，然后每当遇到函数调用都会先创建对应的函数执行上下文推入执行栈，当函数执行完毕后，会立刻将其执行上下文弹出，于是程序控制权又回到上一个上执行上下文。")]),t._v(" "),s("h2",{attrs:{id:"变量对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量对象"}},[t._v("#")]),t._v(" 变量对象")]),t._v(" "),s("p",[t._v("执行上下文中的变量对象保存着当前代码中声明的函数、变量。对于函数执行上下文，变量对象还保存了arguments对象。变量对象是由JS引擎创建的，在JS代码中是访问不到的。当进入一个执行上下文时，其中的变量对象会被激活成为活动对象（Activation Object）。")]),t._v(" "),s("h2",{attrs:{id:"作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),s("p",[t._v("作用域链跟代码中变量的查找息息相关。在执行上下文中，作用域链保存了当前的变量对象以及外层（词法层面）直到全局上下文中的变量对象。查找变量时，会从作用域链的前端（当前变量对象）开始搜索，直到最后（全局执行上下文变量对象，也就是全局对象）。")]),t._v(" "),s("h2",{attrs:{id:"this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),s("p",[t._v("在执行上下文创建时，会确定当前this的指向。在全局执行上下文中，this指向全局对象；在函数执行上下文中，this的指向取决于函数的调用方式，如果函数被一个对象调用，那么this指向这个对象，否则this的值为全局对象或undefined（严格模式下）。")])])}),[],!1,null,null,null);a.default=r.exports}}]);