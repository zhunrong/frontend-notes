(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{400:function(t,a,e){"use strict";e.r(a);var r=e(50),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"事件循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),e("p",[t._v("众所周知，JavaScript 是一门单线程语言，所谓单线程是指 JS 代码只能由一个主线程（main thread）来负责执行。单线程意味着代码只能按顺序执行，好处是代码编写简单，坏处是一旦出现耗时的操作容易造成阻塞。对于一个网页来说存在许多耗时的任务，比如发送网络请求，因此浏览器提供了不同种类的工作线程专门来执行这些任务，避免主线程的阻塞。通过工作线程处理并且在完成之后回调主线程的任务被称为异步任务，而在协调各种异步任务的过程中涉及了一个机制，称为"),e("strong",[t._v("事件循环")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"执行栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),e("p",[t._v("JavaScript 代码执行时存在一个执行栈，每调用一个函数前首先会创建对应的函数执行上下文推入执行栈中交由主线程执行，函数执行完毕后立即将其执行上下文从执行栈中弹出。")]),t._v(" "),e("h2",{attrs:{id:"任务队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#任务队列"}},[t._v("#")]),t._v(" 任务队列")]),t._v(" "),e("p",[t._v("一个函数就是一个任务，任务可以分为同步任务和异步任务，调用某些 API 会创建一个异步任务交给工作线程去执行，执行完毕后进行回调，比如 setTimeout，Promise.prototype.then 等。当调用 setTimeout 时，JS 引擎会向事件表注册一个事件及其回调，然后主线程继续执行其它同步任务，当定时器设定时间到达后，会从事件表中取出其回调函数推到一个任务队列中，等到主线程把同步任务执行完（也就是执行栈清空），就会去取出任务队列中第一个回调推入执行栈中执行，等执行完后再去取，如此循环往复。任务队列保证了回调函数执行的先后顺序。")]),t._v(" "),e("h2",{attrs:{id:"宏任务-微任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宏任务-微任务"}},[t._v("#")]),t._v(" 宏任务 & 微任务")]),t._v(" "),e("p",[t._v("其实任务又可以分为宏任务（MacroTask）与微任务（MicroTask），宏任务与微任务存放在不同的队列中，从宏任务队列取出一个宏任务之前总会先将微任务队列中所有微任务依次取出并执行，然后才取出一个宏任务执行，之后继续执行所有微任务，如此往复。所以可以认为微任务总是优先于宏任务执行。")]),t._v(" "),e("p",[t._v("以下方式创建的都是微任务：")]),t._v(" "),e("ol",[e("li",[t._v("promise.then()")]),t._v(" "),e("li",[t._v("new MutationObserver()")])]),t._v(" "),e("p",[t._v("除了微任务，其它任务都是宏任务，包括但不限于：")]),t._v(" "),e("ol",[e("li",[t._v("setTimeout、setInterval")]),t._v(" "),e("li",[t._v("DOM 事件")]),t._v(" "),e("li",[t._v("网络请求")])])])}),[],!1,null,null,null);a.default=s.exports}}]);